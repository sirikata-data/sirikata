#!/bin/bash

################################################################################################################################
# Initialize variables
################################################################################################################################

USE_ROOT=false
USER=`whoami`
SAME_USER=true
NUM_PROCS=-j2
DIR=`pwd`

WITH_MONO=true

################################################################################################################################
# Parse command-line arguments
################################################################################################################################

until [ -z "$1" ]  # until all parameters used up
do
  case "$1" in
      --use-root ) USE_ROOT=true ;;
      --user )
          shift
          USER="$1"
          ;;
      -j* ) NUM_PROCS="$1" ;;
      --installed-boost )
          shift
          INSTALLED_BOOST="$1"
          ;;
      --installed-freeimage )
          shift
          INSTALLED_FREEIMAGE="$1"
          ;;
      --installed-curl )
          shift
          INSTALLED_CURL="$1"
          ;;
      --installed-protobufs )
          shift
          INSTALLED_PROTOBUFS="$1"
          ;;
      --installed-ois )
          shift
          INSTALLED_OIS="$1"
          ;;
      --installed-ogre )
          shift
          INSTALLED_OGRE="$1"
          ;;
      --without-mono )
          WITH_MONO=false
          ;;
      --help )
          echo "
Usage: $0 [--use-root] [--user <username>] [-j<num-procs>]
           [--installed-boost <path>]
           [--installed-freeimage <path>]
           [--installed-curl <path>]
           [--installed-protobufs <path>]
           [--installed-ogre <path>]
           [--installed-ois <path>]
           [--without-mono]

You must run the script with root privileges (sudo) if you specify --use-root.
$0 --help displays this help message.
"
          exit
          ;;
  esac
  shift
done


################################################################################################################################
# Check for superuser
################################################################################################################################

if $USE_ROOT ; then
    while test $UID != "0" ; do
        echo "
Please run this script with root privileges when you specify --use-root.
Type $0 --help to see a list of all options.
"
        exit;
    done
fi


################################################################################################################################
# Check for distro
################################################################################################################################

if $USE_ROOT ; then
    if [[ -n `which apt-get` ]] ; then
        DISTRO=debian
    else
        # TODO: Replace with message listing packages that should be installed as root, as per Patrick's suggestion
        echo "Installing as root is not supported on your distribution."
        exit
    fi
fi


################################################################################################################################
# Install support packages
################################################################################################################################

if $USE_ROOT ; then
     case "$DISTRO" in
       debian )
           apt-get install unzip zip automake1.9 nvidia-cg-toolkit jam g++ libzzip-dev libxt-dev libxaw7-dev libxxf86vm-dev \
                           libxrandr-dev libfreetype6-dev autoconf libtool libpcre3-dev flex bison patch libbz2-dev gawk \
                           cmake libglu1-mesa-dev
           ;;
     esac
fi


################################################################################################################################
# Check if the user runnning the script is the the same as the one specified on the command line
################################################################################################################################

if [[ $USER != `whoami` ]] ; then
    SAME_USER=false
fi


################################################################################################################################
# Define a function to execute a command as a different user if necessary
################################################################################################################################

function user_eval {
    if $SAME_USER ; then
        eval $1
    else
        su -c "$1" - $USER
    fi
}


################################################################################################################################
# Define a function to make a symlink to an existing installation
################################################################################################################################

function make_symlink {
    TARGET=$1
    LINK_NAME=$2

    user_eval "cd ${DIR}; rm -f $LINK_NAME; ln -s $TARGET $LINK_NAME"
}

echo "Installing FreeImage..."
FREEIMAGE_INSTALLED=false
if [[ -n "$INSTALLED_FREEIMAGE" ]] ; then
    make_symlink $INSTALLED_FREEIMAGE installed-freeimage
    FREEIMAGE_INSTALLED=true
fi

if ! $FREEIMAGE_INSTALLED ; then
    user_eval "cd ${DIR};
               unzip -o FreeImage3100.zip;
               cd FreeImage;
               patch -p1 < ../FreeImage64bit.patch;
               make $NUM_PROCS;
               make dist;
               cd ..;mkdir lib||echo exists;mkdir include||echo exists;
               cp FreeImage/Dist/* ${DIR}/lib;
               cp FreeImage/Dist/* ${DIR}/include"
    make_symlink $DIR installed-freeimage
fi


echo "Installing SDL..."
SDL_INSTALLED=false
if [[ -n "$INSTALLED_SDL" ]] ; then
    make_symlink $INSTALLED_SDL installed-ogre
    SDL_INSTALLED=true
fi

if ! $SDL_INSTALLED ; then
    user_eval "cd ${DIR};
               tar -zxf SDL-1.3.0-4460.tar.gz;
               cd SDL-1.3.0-4460;
               ./configure --prefix=${DIR};
               patch -p0 < ../SDLkeymouse.patch
               make $NUM_PROCS;
               make install;
               cd .."
fi

echo "Installing ANTLR..."
ANTLR_INSTALLED=false
if [[ -n "$INSTALLED_ANTLR" ]] ; then
    make_symlink $INSTALLED_ANTLR installed-ogre
    ANTLR_INSTALLED=true
fi

if ! $ANTLR_INSTALLED ; then
    user_eval "cd ${DIR};
               tar -zxf libantlr3c-3.1.3.tar.gz;
               cd libantlr3c-3.1.3;
               uname -m | grep x86_64 &&./configure --prefix=${DIR} --disable-shared --enable-64bit;
               uname -m | grep x86_64 || ./configure --prefix=${DIR} --disable-shared;
               make $NUM_PROCS;
               make install;
               cd .."
fi

################################################################################################################################
# Install Boost
################################################################################################################################

echo "Installing Boost..."
BOOST_INSTALLED=false
PREFIX_BOOST=true
if [[ -n "$INSTALLED_BOOST" ]] ; then
    make_symlink $INSTALLED_BOOST installed-boost
    BOOST_INSTALLED=true
elif $USE_ROOT ; then
    case "$DISTRO" in
        debian )
            if (apt-get install libboost-system1.39-dev || apt-get install libboost-system1.38-dev || apt-get install libboost-system1.37-dev || apt-get install libboost-system1.36-dev) ; then
                apt-get install libboost-program_options1.39-dev || apt-get install libboost-program_options1.38-dev || apt-get install libboost-program_options1.37-dev || apt-get install libboost-program_options1.36-dev
                apt-get install libboost-thread1.39-dev || apt-get install libboost-thread1.38-dev || apt-get install libboost-thread1.37-dev || apt-get install libboost-thread1.36-dev
                apt-get install libboost-math1.39-dev || apt-get install libboost-math1.38-dev || apt-get install libboost-math1.37-dev || apt-get install libboost-math1.36-dev
                BOOST_INSTALLED=true
                PREFIX_BOOST=false
            fi
            ;;
    esac
fi

if ! $BOOST_INSTALLED ; then
    user_eval "cd ${DIR};
               tar -jxf boost_1_37_0.tar.bz2;
               cd boost_1_37_0;
               ./configure --prefix=${DIR};
               cat Makefile | sed -e s/LIBS=$/LIBS=$NUM_PROCS/ > Makefile_multiproc;
               make $NUM_PROCS -f Makefile_multiproc;
               make install;
               cd .."
fi


################################################################################################################################
# Install CURL
################################################################################################################################

echo "Installing CURL..."
CURL_INSTALLED=false
if [[ -n "$INSTALLED_CURL" ]] ; then
    make_symlink $INSTALLED_CURL installed-curl
    CURL_INSTALLED=true
elif $USE_ROOT ; then
    case "$DISTRO" in
        debian )
            apt-get install libcurl4-openssl-dev
            CURL_INSTALLED=true
            ;;
    esac
fi

if ! $CURL_INSTALLED ; then

    user_eval "cd ${DIR};
               tar -jxf curl-7.19.4.tar.bz2;
               cd curl-7.19.4;
               ./configure --prefix=${DIR}/installed-curl;
               make $NUM_PROCS;
               make install;
               cd ${DIR}"
    #make_symlink /usr installed-curl
    #CURL_INSTALLED=true
    #echo "Could not install CURL"
    #exit
fi



################################################################################################################################
# Install OIS
################################################################################################################################

echo "Installing OIS..."
OIS_INSTALLED=false
if [[ -n "$INSTALLED_OIS" ]] ; then
    make_symlink $INSTALLED_OIS installed-ois
    OIS_INSTALLED=true
fi

if ! $OIS_INSTALLED ; then
    user_eval "cd ${DIR};
               tar -zxf ois_1.2.0.tar.gz;
               cd ois;
               ./bootstrap
               ./configure --prefix=${DIR};
               make $NUM_PROCS;
               make install;
               cd .."
fi

################################################################################################################################
# Install Ogre
################################################################################################################################

echo "Installing Ogre..."
OGRE_INSTALLED=false
if [[ -n "$INSTALLED_OGRE" ]] ; then
    make_symlink $INSTALLED_OGRE installed-ogre
    OGRE_INSTALLED=true
fi

if ! $OGRE_INSTALLED ; then
if ! $PREFIX_BOOST ; then
    user_eval "cd ${DIR};
               tar -jxf ogre-v1-6-1.tar.bz2;
               cd ogre;
               patch -p0 < ../ogre.patch;
               ./bootstrap;
               ./configure --enable-threading=semi --prefix=${DIR} LDFLAGS=-L${DIR}/installed-freeimage/lib CXXFLAGS=-I${DIR}/installed-freeimage/include;
               make $NUM_PROCS;
               make install;
               cd .."
else
    user_eval "cd ${DIR};
               tar -jxf ogre-v1-6-1.tar.bz2;
               cd ogre;
               patch -p0 < ../ogre.patch;
               ./bootstrap;
               ./configure --enable-threading=semi --prefix=${DIR} --with-boost=${DIR} LDFLAGS=-L${DIR}/installed-freeimage/lib CXXFLAGS=-I${DIR}/installed-freeimage/include;
               make $NUM_PROCS;
               make install;
               cd .."
fi
fi

################################################################################################################################
# Install Mono
################################################################################################################################

if $WITH_MONO ; then

echo "Installing MONO..."
MONO_INSTALLED=false
if [[ -n "$INSTALLED_MONO" ]] ; then
    make_symlink $INSTALLED_MONO installed-mono
    MONO_INSTALLED=true
fi

if ! $MONO_INSTALLED ; then
    user_eval "cd ${DIR};
               tar -jxf mono-2.4.tar.bz2;
               cd mono-2.4;
               ./configure --prefix=${DIR}/installed-mono;
               make $NUM_PROCS;
               make install;
               cd .."
fi

fi

################################################################################################################################
# Install DotNet-Protobufs
################################################################################################################################

if $WITH_MONO ; then

echo "Installing DotNet-Protobufs..."
if [[ -n "$INSTALLED_PROTOBUFS" ]] ; then
    make_symlink $INSTALLED_PROTOBUFS installed-protobufs
else
    user_eval "cd ${DIR};
               tar -zxf dotnet-protobufs.f0b299db576712173d00cacf0fd7c7583eb8ed25.tar.gz;
               cd dotnet-protobufs;
               patch -p1 -N < ../protobufs_patches/build_fix.patch;
               patch -p1 -N < ../protobufs_patches/csharp_generator_generic_namespace_alias.patch;
               patch -p0 -N < ../protobufs_patches/new_list_empty.patch;
               mkdir ${DIR}/lib >& /dev/null || touch ${DIR}/lib ;
               find csharp/ProtocolBuffers -name *.cs |xargs ../installed-mono/bin/gmcs -target:library -out:${DIR}/lib/Google.ProtocolBuffers.dll ;
               ./autogen.sh;
               ./configure --prefix=${DIR};
               make $NUM_PROCS;
               make install;
               cd .."
fi

else
# Just install regular protocol buffers from Google
echo "Installing Protobufs..."
    user_eval "cd ${DIR};
               wget http://protobuf.googlecode.com/files/protobuf-2.1.0.tar.gz;
               tar -xzvf protobuf-2.1.0.tar.gz;
               cd protobuf-2.1.0;
               mkdir ${DIR}/lib >& /dev/null || touch ${DIR}/lib ;
               ./autogen.sh;
               ./configure --prefix=${DIR};
               make $NUM_PROCS;
               make install;
               cd .."
fi

################################################################################################################################
# Finish
################################################################################################################################

echo "Installation complete"
