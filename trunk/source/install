#!/bin/bash

################################################################################################################################
# Initialize variables
################################################################################################################################

USE_ROOT=false
USER=`whoami`
USER_SHELL="$SHELL"
SAME_USER=true
NUM_PROCS=-j2
DIR=`pwd`
platform="`uname -m`"


FORCE_32BIT=false

WITH_BOOST=false
WITH_FREEIMAGE=false
WITH_CURL=false
WITH_PROTOBUFS=false
WITH_OIS=false
WITH_OGRE=false
WITH_MONO=false
WITH_BULLET=false
WITH_SDL=false
WITH_ANTLR=false

SHOW_USAGE=true

function show_usage
{
          echo "
Usage: $0 [--use-root] [--user <username>] [-j<num-procs>]
           [--force-32bit]
           [--installed-boost <path>]
           [--installed-bullet <path>]
           [--installed-freeimage <path>]
           [--installed-curl <path>]
           [--installed-protobufs <path>]
           [--installed-ogre <path>]
           [--installed-ois <path>]
           <package> ...

Packages include:
	all, boost, freeimage, curl, protobufs, sdl, ois, ogre, mono, bullet

You must run the script with root privileges (sudo) if you specify --use-root.
$0 --help displays this help message.
"
}

################################################################################################################################
# Parse command-line arguments
################################################################################################################################

until [ -z "$1" ]  # until all parameters used up
do
  case "$1" in

      boost)
          SHOW_USAGE=false
          WITH_BOOST=true
          ;;
      freeimage)
          WITH_FREEIMAGE=true
          SHOW_USAGE=false
          ;;
      curl)
          WITH_CURL=true
          SHOW_USAGE=false
          ;;
      protobufs)
          WITH_PROTOBUFS=true
          SHOW_USAGE=false
          ;;
      sdl)
          WITH_SDL=true
          SHOW_USAGE=false
          ;;
      ois)
          WITH_OIS=true
          SHOW_USAGE=false
          ;;
      ogre)
          WITH_OGRE=true
          SHOW_USAGE=false
          ;;
      mono)
          WITH_MONO=true
          SHOW_USAGE=false
          ;;
      antlr)
          WITH_ANTLR=true
          SHOW_USAGE=false
          ;;
      bullet)
          WITH_BULLET=true
          SHOW_USAGE=false
          ;;
      all)
          WITH_BOOST=true
          WITH_FREEIMAGE=true
          WITH_CURL=true
          WITH_PROTOBUFS=true
          WITH_OIS=true
          WITH_OGRE=true
          WITH_MONO=true
          WITH_BULLET=true
          WITH_ANTLR=true
          SHOW_USAGE=false
          ;;

      --use-root )
          SHOW_USAGE=false
          USE_ROOT=true
          ;;
      --user )
          shift
          USER="$1"
          ;;
      --user-shell )
          shift
          USER_SHELL="$1"
          ;;
      -j* ) NUM_PROCS="$1" ;;
      --installed-boost )
          shift
          INSTALLED_BOOST="$1"
          ;;
      --installed-freeimage )
          shift
          INSTALLED_FREEIMAGE="$1"
          ;;
      --installed-curl )
          shift
          INSTALLED_CURL="$1"
          ;;
      --installed-protobufs )
          shift
          INSTALLED_PROTOBUFS="$1"
          ;;
      --installed-bullet )
          shift
          INSTALLED_BULLET="$1"
          ;;
      --installed-ois )
          shift
          INSTALLED_OIS="$1"
          ;;
      --installed-ogre )
          shift
          INSTALLED_OGRE="$1"
          ;;
      --without-mono )
          WITH_MONO=false
          ;;
      --force-32bit )
          if [ x"$platform" = x"x86_64" ]; then
              USER_SHELL="setarch i386 $SHELL"
              FORCE_32BIT=true
          fi
          ;;
      --help )
          show_usage
          exit
          ;;
  esac
  shift
done

if $SHOW_USAGE; then
    show_usage
    exit
fi

################################################################################################################################
# Check for superuser
################################################################################################################################

if $USE_ROOT ; then
    while test $UID != "0" ; do
        echo "
Please run this script with root privileges when you specify --use-root.
Type $0 --help to see a list of all options.
"
        exit;
    done
fi


################################################################################################################################
# Check for distro
################################################################################################################################

if $USE_ROOT ; then
    if [[ -n `which apt-get` ]] ; then
        DISTRO=debian
    else
        # TODO: Replace with message listing packages that should be installed as root, as per Patrick's suggestion
        echo "Installing as root is not supported on your distribution."
        exit
    fi
fi


################################################################################################################################
# Install support packages
################################################################################################################################

if $USE_ROOT ; then
     case "$DISTRO" in
       debian )
           apt-get install unzip zip automake1.9 nvidia-cg-toolkit jam g++ libzzip-dev libxt-dev libxaw7-dev libxxf86vm-dev \
                           libxrandr-dev libfreetype6-dev autoconf libtool libpcre3-dev flex bison patch libbz2-dev gawk \
                           cmake libglu1-mesa-dev tofrodos
           ;;
     esac
fi


################################################################################################################################
# Check if the user runnning the script is the the same as the one specified on the command line
################################################################################################################################

if [[ $USER != `whoami` ]] ; then
    SAME_USER=false
fi


################################################################################################################################
# Define a function to execute a command as a different user if necessary
################################################################################################################################

function user_eval {
    if $SAME_USER ; then
        pushd "${DIR}" >/dev/null
        $USER_SHELL -c "$1"
        RET=$?
        popd >/dev/null
        return $RET
    else
        su - $USER $USER_SHELL -c "export OLDPATH='$OLDPATH'; export PATH='$PATH'; cd ${DIR}; $1"
        return $?
    fi
}

################################################################################################################################
# Define a function to make a symlink to an existing installation
################################################################################################################################

function make_symlink {
    TARGET=$1
    LINK_NAME=$2

    user_eval "cd ${DIR}; rm -f $LINK_NAME; ln -fs $TARGET $LINK_NAME"
}

# Unlike make_symlink, this will delete the contents, if this is not a symlink.
function clean_dir {
    DIRECTORY=$1
    user_eval "cd ${DIR}; rm -f ${DIRECTORY} 2>/dev/null; rm -rf ${DIRECTORY}"
}

user_eval "cd ${DIR}; mkdir ${DIR}/include >& /dev/null || touch ${DIR}/include"
user_eval "cd ${DIR}; mkdir ${DIR}/lib >& /dev/null || touch ${DIR}/lib"

if $FORCE_32BIT; then
    echo "******** Forcing 32-bit ********"
    user_eval "
    mkdir bin32 ;
    echo '#!/bin/bash' > bin32/gcc ;
    echo 'export PATH="'"${OLDPATH}"'"' >> bin32/gcc ;
    echo '"'`basename $0` -m32 "${@/usr\/lib\/lib/usr/lib32/lib}"'"' >> bin32/gcc ;
    cp -f bin32/gcc bin32/g++ ;
    cp -f bin32/gcc bin32/c++ ;
    cp -f bin32/gcc bin32/cc ;
    chmod +x bin32/*
    "
    export OLDPATH="${PATH}"
    export PATH="${DIR}/bin32:${PATH}"
    echo $PATH
fi

################################################################################################################################
# Install 32-bit support packages
################################################################################################################################

if $USE_ROOT && $FORCE_32BIT; then
     case "$DISTRO" in
       debian )
           apt-get install libc6-dev-i386 libc6-i386 ia32-libs lib32gcc1 lib32stdc++6
           apt-get install lib32asound2 lib32gomp1 lib32icu38 lib32ncurses5 lib32nss-mdns lib32z1 libx86-1
           ;;
     esac
fi


FAILED=

################################################################################################################################
# Install FreeImage and SDL and ANTLR
################################################################################################################################

if [[ -n "$INSTALLED_FREEIMAGE" ]] ; then
    make_symlink $INSTALLED_FREEIMAGE installed-freeimage
elif $WITH_FREEIMAGE; then
    echo "Installing FreeImage..."
    user_eval "cd ${DIR};
               unzip -o FreeImage3100.zip &&
               cd FreeImage &&
               patch -p1 < ../FreeImage64bit.patch &&
               make $NUM_PROCS &&
               make dist &&
               (cd ..;mkdir lib||echo exists;mkdir include||echo exists ;
               cp FreeImage/Dist/* ${DIR}/lib;
               cp FreeImage/Dist/* ${DIR}/include )" && \
    make_symlink FreeImage installed-freeimage || \
    FAILED="$FAILED freeimage"
fi


if [[ -n "$INSTALLED_SDL" ]] ; then
    make_symlink $INSTALLED_SDL installed-sdl
elif $WITH_SDL; then
    echo "Installing SDL..."
    user_eval "cd ${DIR} &&
               tar -zxf SDL-1.3.0-4460.tar.gz &&
               cd SDL-1.3.0-4460 &&
               ./configure --prefix=${DIR} &&
               patch -p0 < ../SDLkeymouse.patch &&
               make $NUM_PROCS &&
               make install" && \
    make_symlink SDL-1.3.0-4460 installed-sdl || \
    FAILED="$FAILED sdl"
fi

if [[ -n "$INSTALLED_ANTLR" ]] ; then
    make_symlink $INSTALLED_ANTLR installed-antlr
elif $WITH_ANTLR ; then
    echo "Installing ANTLR..."
    user_eval "cd ${DIR} &&
               tar -zxf libantlr3c-3.1.3.tar.gz &&
               cd libantlr3c-3.1.3 &&
               (if uname -m | grep x86_64; then
                   ./configure --prefix=${DIR} --disable-shared --enable-64bit ;
               else
                   ./configure --prefix=${DIR} --disable-shared ;
               fi) &&
               make $NUM_PROCS &&
               make install" && \
    make_symlink libantlr3c-3.1.3 installed-antlr || \
    FAILED="$FAILED antlr"

fi

################################################################################################################################
# Install Boost
################################################################################################################################

PREFIX_BOOST=true
if [[ -n "$INSTALLED_BOOST" ]] ; then
    make_symlink $INSTALLED_BOOST installed-boost
    WITH_BOOST=false
fi
if $USE_ROOT && $WITH_BOOST; then
  if ! $FORCE_32BIT; then
    echo "Installing Boost system-wide..."
    case "$DISTRO" in
        debian )
            if (apt-get install libboost-system1.39-dev || apt-get install libboost-system1.38-dev || apt-get install libboost-system1.37-dev || apt-get install libboost-system1.36-dev) ; then
                apt-get install libboost-program_options1.39-dev || apt-get install libboost-program_options1.38-dev || apt-get install libboost-program_options1.37-dev || apt-get install libboost-program_options1.36-dev
                apt-get install libboost-thread1.39-dev || apt-get install libboost-thread1.38-dev || apt-get install libboost-thread1.37-dev || apt-get install libboost-thread1.36-dev
                apt-get install libboost-math1.39-dev || apt-get install libboost-math1.38-dev || apt-get install libboost-math1.37-dev || apt-get install libboost-math1.36-dev
                make_symlink /usr/lib installed-boost
                PREFIX_BOOST=false
                WITH_BOOST=false
            fi
            ;;
    esac
  fi
fi
if $WITH_BOOST ; then
    echo "Installing Boost..."
    clean_dir installed-boost
    user_eval "cd ${DIR} &&
               tar -jxf boost_1_37_0.tar.bz2 &&
               cd boost_1_37_0 &&
               ./configure --without-icu --without-libraries=python --prefix=${DIR}/installed-boost &&
               cat Makefile | sed -e s/LIBS=$/LIBS=$NUM_PROCS/ > Makefile_multiproc &&
               make $NUM_PROCS -f Makefile_multiproc &&
               make install" || \
    FAILED="$FAILED boost"
fi


################################################################################################################################
# Install CURL
################################################################################################################################

if [[ -n "$INSTALLED_CURL" ]] ; then
    make_symlink $INSTALLED_CURL installed-curl
    WITH_CURL=false
fi
if $USE_ROOT && $WITH_CURL ; then
  if ! $FORCE_32BIT; then
    echo "Installing CURL system-wide..."
    case "$DISTRO" in
        debian )
            apt-get install libcurl4-openssl-dev
            make_symlink /usr/lib installed-curl
            WITH_CURL=false
            ;;
    esac
  fi
fi
if $WITH_CURL ; then
    echo "Installing CURL..."
    clean_dir installed-curl
    user_eval "cd ${DIR} &&
               tar -jxf curl-7.19.4.tar.bz2 &&
               cd curl-7.19.4 &&
               ./configure --prefix=${DIR}/installed-curl &&
               make $NUM_PROCS &&
               make install" || \
    FAILED="$FAILED curl"
fi



################################################################################################################################
# Install OIS
################################################################################################################################

if [[ -n "$INSTALLED_OIS" ]] ; then
    make_symlink $INSTALLED_OIS installed-ois
elif $WITH_OIS ; then
    echo "Installing OIS..."
    user_eval "cd ${DIR} &&
               tar -zxf ois_1.2.0.tar.gz &&
               cd ois &&
               ./bootstrap &&
               ./configure --prefix=${DIR} &&
               make $NUM_PROCS &&
               make install" && \
    make_symlink ois installed-ois || \
    FAILED="$FAILED ois"

fi

# Install Bullet

if [[ -n "$INSTALLED_BULLET" ]] ; then
    make_symlink $INSTALLED_BULLET installed-bullet
elif $WITH_BULLET ; then
    echo "Installing Bullet..."
    clean_dir installed-bullet
    user_eval "cd ${DIR} &&
               tar -zxf bullet-2.74.tgz &&
               cd bullet-2.74 &&
               mv install-sh install-sh.bak &&
               tr -d '\r' < install-sh.bak > install-sh &&
               chmod 755 install-sh &&
               ./autogen.sh &&
               ./configure --prefix=${DIR}/installed-bullet &&
               make $NUMPROCS &&
               make install && 
               cp src/BulletDynamics/Dynamics/btActionInterface.h ${DIR}/installed-bullet/include/bullet/BulletDynamics/Dynamics/ && 
               echo // >>${DIR}/installed-bullet/include/bullet/BulletDynamics/Dynamics/btActionInterface.h" || \
    FAILED="$FAILED bullet"

fi

################################################################################################################################
# Install Ogre
################################################################################################################################

if [[ -n "$INSTALLED_OGRE" ]] ; then
    make_symlink $INSTALLED_OGRE installed-ogre
elif $WITH_OGRE ; then
    echo "Installing Ogre..."
    if $PREFIX_BOOST ; then
        EXTRA_FLAGS="--with-boost=${DIR}/installed-boost"
    fi
    if $FORCE_32BIT; then
        [ -e "${DIR}/lib/libzzip.so" ] || [ -e "/usr/lib32/libzzip.so" ] || \
            user_eval "echo Installing 32-bit ZZIP;
                       cd ${DIR} &&
                       mkdir temp-extract && cd temp-extract &&
                       wget http://http.us.debian.org/debian/pool/main/z/zziplib/libzzip-0-13_0.13.49-4_i386.deb -O zzip.deb &&
                       ar p zzip.deb data.tar.gz | tar -zxf - &&
                       cd usr/lib &&
                       ln -s libzzip-0.so.13 libzzip.so &&
                       cp -p libzzip* ${DIR}/lib/" && \
            echo "zzip installed"
        ZZIPLIB_LIBS="-L${DIR}/lib -lzzip"
        [ -e "/usr/lib32/libXaw.so" ] || ln -sf /usr/lib32/libXaw.so.* ${DIR}/lib/libXaw.so 2> /dev/null
    fi
    clean_dir installed-ogre
    user_eval "cd ${DIR} &&
               tar -jxf ogre-v1-6-1.tar.bz2 &&
               cd ogre &&
               patch -p0 < ../ogre.patch &&
               ./bootstrap &&
               ZZIPLIB_LIBS='${ZZIPLIB_LIBS}' ./configure --enable-threading=semi ${EXTRA_FLAGS} --prefix=${DIR} LDFLAGS=-L${DIR}/lib CXXFLAGS=-I${DIR}/include &&
               make $NUM_PROCS &&
               make install" && \
    make_symlink ogre installed-ogre || \
    FAILED="$FAILED ogre"
fi

################################################################################################################################
# Install Mono
################################################################################################################################

MONO_INSTALLED=false
if [[ -n "$INSTALLED_MONO" ]] ; then
    make_symlink $INSTALLED_MONO installed-mono
elif $WITH_MONO ; then
    echo "Installing MONO..."
    clean_dir installed-mono
    user_eval "cd ${DIR} &&
               tar -jxf mono-2.4.tar.bz2 &&
               cd mono-2.4 &&
               ./configure --prefix=${DIR}/installed-mono &&
               make $NUM_PROCS &&
               make install" || \
    FAILED="$FAILED mono"
fi

################################################################################################################################
# Install DotNet-Protobufs
################################################################################################################################


if [[ -n "$INSTALLED_PROTOBUFS" ]] ; then
    make_symlink $INSTALLED_PROTOBUFS installed-protobufs
elif $WITH_MONO ; then
    echo "Installing DotNet-Protobufs..."
    user_eval "cd ${DIR} &&
               tar -zxf dotnet-protobufs.f0b299db576712173d00cacf0fd7c7583eb8ed25.tar.gz &&
               cd dotnet-protobufs &&
               patch -p1 -N < ../protobufs_patches/build_fix.patch &&
               patch -p1 -N < ../protobufs_patches/csharp_generator_generic_namespace_alias.patch &&
               patch -p0 -N < ../protobufs_patches/new_list_empty.patch &&
               find csharp/ProtocolBuffers -name *.cs |xargs ../installed-mono/bin/gmcs -target:library -out:${DIR}/lib/Google.ProtocolBuffers.dll && \
               ./autogen.sh && \
               ./configure --prefix=${DIR}/installed-protobufs && \
               make $NUM_PROCS && \
               make install" || \
    FAILED="$FAILED protobufs"
elif $WITH_PROTOBUFS; then
# Just install regular protocol buffers from Google
   echo "Installing Protobufs without mono..."
    user_eval "cd ${DIR};
               wget http://protobuf.googlecode.com/files/protobuf-2.1.0.tar.gz;
               tar -xzvf protobuf-2.1.0.tar.gz;
               cd protobuf-2.1.0;
               mkdir ${DIR}/lib >& /dev/null || touch ${DIR}/lib ;
               ./autogen.sh;
               ./configure --prefix=${DIR}/installed-protobufs;
               make $NUM_PROCS;
               make install;
               cd .." || \
    FAILED="$FAILED protobufs"
fi

################################################################################################################################
# Finish
################################################################################################################################

if ! [ x = x"$FAILED" ]; then
    for FAILITEM in $FAILED; do
        echo CLEANING $FAILITEM
        clean_dir "installed-$FAILITEM"
    done
    echo "Installation of $FAILED has failed."
    exit 1
fi

exit 0
